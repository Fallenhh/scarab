/* Copyright 2020 HPS/SAFARI Research Groups
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* -*- Mode: c -*- */

/* These ".param.def" files contain the various parameters that can be given to the
   simulator.  NOTE: Don't screw around with the order of these macro fields without
   fixing the etags regexps.

   DEF_PARAM(  Option, Variable Name, Type, Function, Default Value, Const	    ) 

   Option -- The name of the parameter when given on the command line (eg. "--param_0"								    ).
	   All parameters take an argument.  Thus , "--param_0=3" would be a valid
	   specification.

   Variable Name -- The name of the variable that will be created in 'parameters.c' and
	    externed in 'parameters.h'.

   Type -- The type of the variable that will be created in 'parameters.c' and externed
	   in 'parameters.h'.

   Function -- The name of the function declared in 'parameters.c' that will parse the
	    text after the '='.

   Default Value -- The default value that the variable created will have.  This must be
	    the same type as the 'Type' field indicates (or be able to be cast to it								    ).

   Const -- Put the word "const" here if you want this parameter to be constant.  An
	    error messsage will be printed if the user tries to set it with a command
	    line option.

*/

// Organization
DEF_PARAM(ramulator_standard             , RAMULATOR_STANDARD                      , char*   , string , "DDR4"               , )
DEF_PARAM(ramulator_speed                , RAMULATOR_SPEED                         , char*   , string , "DDR4_2400R"         , )
DEF_PARAM(ramulator_org                  , RAMULATOR_ORG                           , char*   , string , "DDR4_8Gb_x8"        , )
DEF_PARAM(ramulator_channels             , RAMULATOR_CHANNELS                      , uns     , uns    , 1                    , )
DEF_PARAM(ramulator_ranks                , RAMULATOR_RANKS                         , uns     , uns    , 1                    , )
DEF_PARAM(ramulator_bankgroups           , RAMULATOR_BANKGROUPS                    , uns     , uns    , 4                    , )
DEF_PARAM(ramulator_banks                , RAMULATOR_BANKS                         , uns     , uns    , 4                    , )
DEF_PARAM(ramulator_chip_width           , RAMULATOR_CHIP_WIDTH                    , uns     , uns    , 8                    , ) // in bits
DEF_PARAM(bus_width_in_bytes             , BUS_WIDTH_IN_BYTES                      , uns     , uns    , 8                    , )
DEF_PARAM(ramulator_rows                 , RAMULATOR_ROWS                          , uns     , uns    , 65536                , )
DEF_PARAM(ramulator_cols                 , RAMULATOR_COLS                          , uns     , uns    , 1024                 , )

// Request Scheduling Policy
DEF_PARAM(ramulator_scheduling_policy    , RAMULATOR_SCHEDULING_POLICY             , char*   , string , "FRFCFS_Cap"         , )

// Request Queues
DEF_PARAM(ramulator_readq_entries        , RAMULATOR_READQ_ENTRIES                 , uns     , uns    , 32                   , ) 
DEF_PARAM(ramulator_writeq_entries       , RAMULATOR_WRITEQ_ENTRIES                , uns     , uns    , 32                   , ) 

// Misc.
DEF_PARAM(ramulator_record_cmd_trace     , RAMULATOR_REC_CMD_TRACE                 , char*   , string , "off"              , )
DEF_PARAM(ramulator_print_cmd_trace      , RAMULATOR_PRINT_CMD_TRACE               , char*   , string , "off"              , )
// make sure that we never artificially introduce aliasing between two phys addrs in Ramulator by making sure we subsume
// every single phys addr bit in the DRAM address. All phys addrs bits not included as a channel/rank/bank group/bank/column bit
// will be included as a row bit
DEF_PARAM(ramulator_use_rest_of_addr_as_row_addr, RAMULATOR_USE_REST_OF_ADDR_AS_ROW_ADDR  , char*   , string , "on"        , )
DEF_PARAM(ramulator_track_col_reuse_distance    , RAMULATOR_TRACK_COL_REUSE_DISTANCE      , char*   , string , "off"       , )
DEF_PARAM(ramulator_track_row_reuse_distance    , RAMULATOR_TRACK_ROW_REUSE_DISTANCE      , char*   , string , "off"       , )
DEF_PARAM(ramulator_track_os_page_reuse         , RAMULATOR_TRACK_OS_PAGE_REUSE           , char*   , string , "off"       , )
DEF_PARAM(ramulator_row_always_0                , RAMULATOR_ROW_ALWAYS_0                  , char*   , string , "off"       , )
DEF_PARAM(ramulator_addr_map_type               , RAMULATOR_ADDR_MAP_TYPE                 , char*   , string , "RoBaRaCoCh", )
DEF_PARAM(ramulator_addr_remap_policy           , RAMULATOR_ADDR_REMAP_POLICY             , char*   , string , "None", )
DEF_PARAM(ramulator_addr_remap_copy_mode        , RAMULATOR_ADDR_REMAP_COPY_MODE          , char*   , string , "Real", )
DEF_PARAM(ramulator_addr_remap_copy_granularity , RAMULATOR_ADDR_REMAP_COPY_GRANULARITY   , char*   , string , "Line", )
DEF_PARAM(ramulator_addr_remap_copy_time , RAMULATOR_ADDR_REMAP_COPY_TIME   , char*   , string , "Whenever", )
DEF_PARAM(ramulator_addr_remap_periodic_copy_select_policy , RAMULATOR_ADDR_REMAP_PERIODIC_COPY_SELECT_POLICY   , char*   , string , "CoreAccessFrac", )
DEF_PARAM(ramulator_addr_remap_periodic_copy_intracore_select_policy , RAMULATOR_ADDR_REMAP_PERIODIC_COPY_INTRACORE_SELECT_POLICY   , char*   , string , "MostAccesses", )
DEF_PARAM(ramulator_addr_remap_periodic_copy_candidates_org , RAMULATOR_ADDR_REMAP_PERIODIC_COPY_CANDIDATES_ORG   , char*   , string , "NonrowIndex_FrameFreq", )
DEF_PARAM(ramulator_addr_remap_page_access_threshold , RAMULATOR_ADDR_REMAP_PAGE_ACCESS_THRESHOLD, int     , int    , -1  , )
DEF_PARAM(ramulator_addr_remap_page_reuse_threshold , RAMULATOR_ADDR_REMAP_PAGE_REUSE_THRESHOLD, int     , int    , -1  , )
DEF_PARAM(ramulator_addr_remap_max_per_core_limit_mb , RAMULATOR_ADDR_REMAP_MAX_PER_CORE_LIMIT_MB, int     , int    , -1  , )
DEF_PARAM(ramulator_addr_remap_num_reserved_rows , RAMULATOR_ADDR_REMAP_NUM_RESERVED_ROWS, int     , int    , -1  , )
DEF_PARAM(ramulator_addr_remap_dram_cycles_between_periodic_copy , RAMULATOR_ADDR_REMAP_DRAM_CYCLES_BETWEEN_PERIODIC_COPY, int     , int    , -1  , )
DEF_PARAM(ramulator_addr_remap_insts_between_warmup_periodic_copy , RAMULATOR_ADDR_REMAP_INSTS_BETWEEN_WARMUP_PERIODIC_COPY, int     , int    , -1  , )
DEF_PARAM(ramulator_addr_remap_to_partitioned_rows,   RAMULATOR_ADDR_REMAP_TO_PARTITIONED_ROWS    , char*   , string , "off"   , )
DEF_PARAM(ramulator_addr_remap_channels_share_tables,   RAMULATOR_ADDR_REMAP_CHANNELS_SHARE_TABLES    , char*   , string , "off"   , )
DEF_PARAM(ramulator_addr_remap_choose_minuse_candidate,   RAMULATOR_ADDR_REMAP_CHOOSE_MINUSE_CANDIDATE    , char*   , string , "off"   , )
// Timing parameters (TODO: make these optional. If not specified, present // values defined by RAMULATOR_SPEED should be used instead.)
DEF_PARAM(ramulator_tCK                  , RAMULATOR_TCK                           , uns     , uns    , 833333               , ) //in femtosecs
DEF_PARAM(ramulator_tCL                  , RAMULATOR_TCL                           , uns     , uns    , 16                   , )
DEF_PARAM(ramulator_tCCD                 , RAMULATOR_TCCD                          , uns     , uns    , 6                    , ) 
DEF_PARAM(ramulator_tCCDS                , RAMULATOR_TCCDS                         , uns     , uns    , 4                    , ) 
DEF_PARAM(ramulator_tCCDL                , RAMULATOR_TCCDL                         , uns     , uns    , 6                    , )
DEF_PARAM(ramulator_tRTRS                , RAMULATOR_TRTRS                         , uns     , uns    , 2                    , )  
DEF_PARAM(ramulator_tCWL                 , RAMULATOR_TCWL                          , uns     , uns    , 12                   , ) 
DEF_PARAM(ramulator_tBL                  , RAMULATOR_TBL                           , uns     , uns    , 4                    , ) 
DEF_PARAM(ramulator_tWTR                 , RAMULATOR_TWTR                          , uns     , uns    , 9                    , )
DEF_PARAM(ramulator_tWTRS                , RAMULATOR_TWTRS                         , uns     , uns    , 3                    , )
DEF_PARAM(ramulator_tWTRL                , RAMULATOR_TWTRL                         , uns     , uns    , 9                    , )
DEF_PARAM(ramulator_tRP                  , RAMULATOR_TRP                           , uns     , uns    , 16                   , )
DEF_PARAM(ramulator_tRPpb                , RAMULATOR_TRPpb                         , uns     , uns    , 16                   , )
DEF_PARAM(ramulator_tRPab                , RAMULATOR_TRPab                         , uns     , uns    , 16                   , )
DEF_PARAM(ramulator_tRCD                 , RAMULATOR_TRCD                          , uns     , uns    , 16                   , )
DEF_PARAM(ramulator_tRCDR                , RAMULATOR_TRCDR                         , uns     , uns    , 16                   , )
DEF_PARAM(ramulator_tRCDW                , RAMULATOR_TRCDW                         , uns     , uns    , 16                   , )
DEF_PARAM(ramulator_tRAS                 , RAMULATOR_TRAS                          , uns     , uns    , 39                   , )

DEF_PARAM(dram_tech_in_nm                , DRAM_TECH_IN_NM                         , uns     , uns    , 32                   , )
